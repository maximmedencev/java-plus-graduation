{
  "info": {
    "_postman_id": "9c6cfdd6-a6ae-4d4a-affb-42398d5f2c0b",
    "name": "Feature - Explore With Me",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "34893502"
  },
  "item": [
    {
      "name": "Создание подписки",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        const followerUser = await api.addUser(rnd.getUser());",
              "        const followingUser = await api.addUser(rnd.getUser());",
              "        pm.collectionVariables.set('uid', followerUser.id);",
              "        pm.collectionVariables.set('uid1', followingUser.id);",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            // выполняем наш скрипт",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
              "    pm.response.to.have.status(201);   ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const response = pm.response.json()",
              "pm.test(\"Подписка должна иметь поля id, follower, follwoing, created\", function () {",
              "    pm.expect(response).to.have.property(\"id\")",
              "    pm.expect(response).to.have.property(\"follower\")",
              "    pm.expect(response).to.have.property(\"following\")",
              "    pm.expect(response).to.have.property(\"created\")",
              "})",
              "",
              "pm.test(\"Поля id, follower, following, created не должны быть null\", function () {",
              "    pm.expect(response).to.not.be.null",
              "    pm.expect(response).to.not.be.null",
              "    pm.expect(response).to.not.be.null",
              "    pm.expect(response).to.not.be.null",
              "})"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:followerId/subscriptions/:followingId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":followerId",
            "subscriptions",
            ":followingId"
          ],
          "variable": [
            {
              "key": "followerId",
              "value": "{{uid}}"
            },
            {
              "key": "followingId",
              "value": "{{uid1}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Подписка на самого себя",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        const followerUser = await api.addUser(rnd.getUser());",
              "        const followingUser = followerUser",
              "        pm.collectionVariables.set('uid', followerUser.id);",
              "        pm.collectionVariables.set('uid1', followingUser.id);",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            // выполняем наш скрипт",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
              "    pm.response.to.have.status(409);   ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:followerId/subscriptions/:followingId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":followerId",
            "subscriptions",
            ":followingId"
          ],
          "variable": [
            {
              "key": "followerId",
              "value": "{{uid}}"
            },
            {
              "key": "followingId",
              "value": "{{uid1}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Подписка на несуществующего пользователя",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        const followerUser = await api.addUser(rnd.getUser());",
              "        pm.collectionVariables.set('uid', followerUser.id);",
              "        pm.collectionVariables.set('uid1', 500);",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
              "    pm.response.to.have.status(404);   ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:followerId/subscriptions/:followingId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":followerId",
            "subscriptions",
            ":followingId"
          ],
          "variable": [
            {
              "key": "followerId",
              "value": "{{uid}}"
            },
            {
              "key": "followingId",
              "value": "{{uid1}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Отписаться по id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204 и данные в формате json\", function () {",
              "    pm.response.to.have.status(204);   ",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "    try {",
              "        const targetUser = await api.addUser(rnd.getUser());",
              "        const firstFollowingUser = await api.addUser(rnd.getUser());",
              "        const secondFollowingUser = await api.addUser(rnd.getUser());",
              "        pm.collectionVariables.set('uid', targetUser.id);",
              "        pm.collectionVariables.set('uid1', firstFollowingUser.id);",
              "        pm.collectionVariables.set('uid1', secondFollowingUser.id);",
              "        await pm.sendRequest({",
              "            url : \"http://localhost:8080/users/\" + targetUser.id + \"/subscriptions/\" + firstFollowingUser.id,",
              "            method : \"POST\",",
              "            header: { \"Content-Type\": \"application/json\" }",
              "            }, (error, response) => {",
              "        });",
              "        await pm.sendRequest({",
              "            url : \"http://localhost:8080/users/\" + targetUser.id + \"/subscriptions/\" + secondFollowingUser.id,",
              "            method : \"POST\",",
              "            header: { \"Content-Type\": \"application/json\" }",
              "            }, (error, response) => {",
              "        });",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:followerId/subscriptions/:followingId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":followerId",
            "subscriptions",
            ":followingId"
          ],
          "variable": [
            {
              "key": "followerId",
              "value": "{{uid}}"
            },
            {
              "key": "followingId",
              "value": "{{uid1}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Некорректный id при отписке",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
              "    pm.response.to.have.status(400);   ",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "    try {",
              "        const targetUser = await api.addUser(rnd.getUser());",
              "        const firstFollowingUser = await api.addUser(rnd.getUser());",
              "        const secondFollowingUser = await api.addUser(rnd.getUser());",
              "        pm.collectionVariables.set('uid', targetUser.id);",
              "        pm.collectionVariables.set('uid1', 500);",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:followerId/subscriptions/:followingId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":followerId",
            "subscriptions",
            ":followingId"
          ],
          "variable": [
            {
              "key": "followerId",
              "value": "{{uid}}"
            },
            {
              "key": "followingId",
              "value": "{{uid1}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение подписчиков пользователя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
              "    pm.response.to.have.status(200);   ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const response = pm.response.json()",
              "pm.test(\"Подписчики должны иметь поля id, name\", function () {",
              "    for (const elem of response) {",
              "            pm.expect(elem).to.have.property(\"id\")",
              "            pm.expect(elem).to.have.property(\"name\")",
              "    }",
              "})",
              "",
              "pm.test(\"Поля id, name не должны быть null\", function () {",
              "    for (const elem of response) {",
              "            pm.expect(elem).to.not.be.null",
              "    }",
              "})",
              "",
              "pm.test(\"Количество подписчиков должно быть равно 3\", function () {",
              "    pm.expect(response.length).to.be.eq(3)",
              "})"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        const targetUser = await api.addUser(rnd.getUser());",
              "        const firstFollowingUser = await api.addUser(rnd.getUser());",
              "        const secondFollowingUser = await api.addUser(rnd.getUser());",
              "        const thirdFollowingUser = await api.addUser(rnd.getUser());",
              "        const users = [firstFollowingUser, secondFollowingUser, thirdFollowingUser]",
              "        pm.collectionVariables.set('uid', targetUser.id);",
              "        for (const sourceUser of users) {",
              "            await pm.sendRequest({",
              "                url : \"http://localhost:8080/users/\" + sourceUser.id + \"/subscriptions/\" + targetUser.id,",
              "                method : \"POST\",",
              "                header: { \"Content-Type\": \"application/json\" }",
              "                }, (error, response) => {",
              "            });",
              "        }",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:followerId/subscriptions/followers",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":followerId",
            "subscriptions",
            "followers"
          ],
          "variable": [
            {
              "key": "followerId",
              "value": "{{uid}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получении подписчиков без указанных параметров",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
              "    pm.response.to.have.status(200);   ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const response = pm.response.json()",
              "pm.test(\"Подписчики должны иметь поля id, name\", function () {",
              "    for (const elem of response) {",
              "            pm.expect(elem).to.have.property(\"id\")",
              "            pm.expect(elem).to.have.property(\"name\")",
              "    }",
              "})",
              "",
              "pm.test(\"Поля id, name не должны быть null\", function () {",
              "    for (const elem of response) {",
              "            pm.expect(elem).to.not.be.null",
              "    }",
              "})",
              "",
              "pm.test(\"Количество подписчиков должно быть равно 10\", function () {",
              "    pm.expect(response.length).to.be.eq(10)",
              "})"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        const targetUser = await api.addUser(rnd.getUser());",
              "        const users = []",
              "        for (let i = 0; i < 15; i++) {",
              "            users.push(await api.addUser(rnd.getUser()))",
              "        }",
              "        pm.collectionVariables.set('uid', targetUser.id);",
              "        for (const sourceUser of users) {",
              "            await pm.sendRequest({",
              "                url : \"http://localhost:8080/users/\" + sourceUser.id + \"/subscriptions/\" + targetUser.id,",
              "                method : \"POST\",",
              "                header: { \"Content-Type\": \"application/json\" }",
              "                }, (error, response) => {",
              "            });",
              "        }",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:followerId/subscriptions/followers",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":followerId",
            "subscriptions",
            "followers"
          ],
          "variable": [
            {
              "key": "followerId",
              "value": "{{uid}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получении подписчиков с лимитом",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
              "    pm.response.to.have.status(200);   ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const response = pm.response.json()",
              "pm.test(\"Подписчики должны иметь поля id, name\", function () {",
              "    for (const elem of response) {",
              "            pm.expect(elem).to.have.property(\"id\")",
              "            pm.expect(elem).to.have.property(\"name\")",
              "    }",
              "})",
              "",
              "pm.test(\"Поля id, name не должны быть null\", function () {",
              "    for (const elem of response) {",
              "            pm.expect(elem).to.not.be.null",
              "    }",
              "})",
              "",
              "pm.test(\"Количество подписчиков должно быть равно 5\", function () {",
              "    pm.expect(response.length).to.be.eq(5)",
              "})"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        const targetUser = await api.addUser(rnd.getUser());",
              "        const users = []",
              "        for (let i = 0; i < 15; i++) {",
              "            users.push(await api.addUser(rnd.getUser()))",
              "        }",
              "        pm.collectionVariables.set('uid', targetUser.id);",
              "        for (const sourceUser of users) {",
              "            await pm.sendRequest({",
              "                url : \"http://localhost:8080/users/\" + sourceUser.id + \"/subscriptions/\" + targetUser.id,",
              "                method : \"POST\",",
              "                header: { \"Content-Type\": \"application/json\" }",
              "                }, (error, response) => {",
              "            });",
              "        }",
              "        pm.request.addQueryParams(\"size=5\")",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:followerId/subscriptions/followers",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":followerId",
            "subscriptions",
            "followers"
          ],
          "variable": [
            {
              "key": "followerId",
              "value": "{{uid}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение подписок пользователя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
              "    pm.response.to.have.status(200);   ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const response = pm.response.json()",
              "pm.test(\"Подписки должны иметь поля id, name\", function () {",
              "    for (const elem of response) {",
              "            pm.expect(elem).to.have.property(\"id\")",
              "            pm.expect(elem).to.have.property(\"name\")",
              "    }",
              "})",
              "",
              "pm.test(\"Поля id, name не должны быть null\", function () {",
              "    for (const elem of response) {",
              "            pm.expect(elem).to.not.be.null",
              "    }",
              "})",
              "",
              "pm.test(\"Количество подписок должно быть равно 3\", function () {",
              "    pm.expect(response.length).to.be.eq(3)",
              "})"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        const targetUser = await api.addUser(rnd.getUser());",
              "        const firstFollowingUser = await api.addUser(rnd.getUser());",
              "        const secondFollowingUser = await api.addUser(rnd.getUser());",
              "        const thirdFollowingUser = await api.addUser(rnd.getUser());",
              "        const users = [firstFollowingUser, secondFollowingUser, thirdFollowingUser]",
              "        pm.collectionVariables.set('uid', targetUser.id);",
              "        for (const sourceUser of users) {",
              "            await pm.sendRequest({",
              "                url : \"http://localhost:8080/users/\" + targetUser.id + \"/subscriptions/\" + sourceUser.id,",
              "                method : \"POST\",",
              "                header: { \"Content-Type\": \"application/json\" }",
              "                }, (error, response) => {",
              "            });",
              "        }",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:followerId/subscriptions/following",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":followerId",
            "subscriptions",
            "following"
          ],
          "variable": [
            {
              "key": "followerId",
              "value": "{{uid}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получении подписок без указанных параметров",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
              "    pm.response.to.have.status(200);   ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const response = pm.response.json()",
              "pm.test(\"Подписки должны иметь поля id, name\", function () {",
              "    for (const elem of response) {",
              "            pm.expect(elem).to.have.property(\"id\")",
              "            pm.expect(elem).to.have.property(\"name\")",
              "    }",
              "})",
              "",
              "pm.test(\"Поля id, name не должны быть null\", function () {",
              "    for (const elem of response) {",
              "            pm.expect(elem).to.not.be.null",
              "    }",
              "})",
              "",
              "pm.test(\"Количество подписок должно быть равно 10\", function () {",
              "    pm.expect(response.length).to.be.eq(10)",
              "})"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        const targetUser = await api.addUser(rnd.getUser());",
              "        const users = []",
              "        for (let i = 0; i < 15; i++) {",
              "            users.push(await api.addUser(rnd.getUser()))",
              "        }",
              "        pm.collectionVariables.set('uid', targetUser.id);",
              "        for (const sourceUser of users) {",
              "            await pm.sendRequest({",
              "                url : \"http://localhost:8080/users/\" + targetUser.id + \"/subscriptions/\" + sourceUser.id,",
              "                method : \"POST\",",
              "                header: { \"Content-Type\": \"application/json\" }",
              "                }, (error, response) => {",
              "            });",
              "        }",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:followerId/subscriptions/following",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":followerId",
            "subscriptions",
            "following"
          ],
          "variable": [
            {
              "key": "followerId",
              "value": "{{uid}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получении подписок с лимитом",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
              "    pm.response.to.have.status(200);   ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const response = pm.response.json()",
              "pm.test(\"Подписки должны иметь поля id, name\", function () {",
              "    for (const elem of response) {",
              "            pm.expect(elem).to.have.property(\"id\")",
              "            pm.expect(elem).to.have.property(\"name\")",
              "    }",
              "})",
              "",
              "pm.test(\"Поля id, name не должны быть null\", function () {",
              "    for (const elem of response) {",
              "            pm.expect(elem).to.not.be.null",
              "    }",
              "})",
              "",
              "pm.test(\"Количество подписок должно быть равно 5\", function () {",
              "    pm.expect(response.length).to.be.eq(5)",
              "})"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        const targetUser = await api.addUser(rnd.getUser());",
              "        const users = []",
              "        for (let i = 0; i < 15; i++) {",
              "            users.push(await api.addUser(rnd.getUser()))",
              "        }",
              "        pm.collectionVariables.set('uid', targetUser.id);",
              "        for (const sourceUser of users) {",
              "            await pm.sendRequest({",
              "                url : \"http://localhost:8080/users/\" + targetUser.id + \"/subscriptions/\" + sourceUser.id,",
              "                method : \"POST\",",
              "                header: { \"Content-Type\": \"application/json\" }",
              "                }, (error, response) => {",
              "            });",
              "        }",
              "        pm.request.addQueryParams(\"size=5\")",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:followerId/subscriptions/following",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":followerId",
            "subscriptions",
            "following"
          ],
          "variable": [
            {
              "key": "followerId",
              "value": "{{uid}}"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async addCompilation(compilation, verbose=null) {",
          "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
          "    }",
          "",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
          "    }",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
          "    }",
          "    ",
          "    async rejectEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
          "    }",
          "",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
          "    }",
          "",
          "    async findCategory(catId, verbose=null) {",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
          "    }",
          "",
          "    async findCompilation(compId, verbose=null) {",
          "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
          "    }",
          "",
          "    async findEvent(eventId, verbose=null) {",
          "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
          "    }",
          "",
          "    async findUser(userId, verbose=null) {",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "                    if(verbose) {",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                    }",
          "                    if (response.stream.length === 0){",
          "                        reject(new Error('Отправлено пустое тело ответа'))",
          "                    }else{",
          "                        resolve(response.json());",
          "                    }",
          "                });",
          "                ",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getCompilation(...eventIds) {",
          "        return {",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            events: eventIds",
          "        };",
          "    }",
          "",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "",
          "    getWord(length = 1) {",
          "        let result = '';",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
          "        const charactersLength = characters.length;",
          "        let counter = 0;",
          "        while (counter < length) {",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
          "            counter += 1;",
          "        }",
          "        return result;",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "name",
      "value": "",
      "type": "string"
    },
    {
      "key": "userCount",
      "value": "1",
      "type": "string"
    },
    {
      "key": "catid",
      "value": "1",
      "type": "string"
    },
    {
      "key": "request_body",
      "value": "",
      "type": "string"
    },
    {
      "key": "mail",
      "value": "",
      "type": "string"
    },
    {
      "key": "response",
      "value": "",
      "type": "string"
    },
    {
      "key": "uid",
      "value": "1",
      "type": "string"
    },
    {
      "key": "catname",
      "value": "",
      "type": "string"
    },
    {
      "key": "eid",
      "value": "1",
      "type": "string"
    },
    {
      "key": "compid",
      "value": "1",
      "type": "string"
    },
    {
      "key": "toCheck",
      "value": "",
      "type": "string"
    },
    {
      "key": "newDataToSet",
      "value": "",
      "type": "string"
    },
    {
      "key": "uid1",
      "value": ""
    },
    {
      "key": "uid2",
      "value": "",
      "type": "string"
    },
    {
      "key": "reqid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catId",
      "value": ""
    },
    {
      "key": "confirmedRequests",
      "value": ""
    },
    {
      "key": "responseArr",
      "value": ""
    },
    {
      "key": "source1",
      "value": ""
    },
    {
      "key": "source2",
      "value": ""
    },
    {
      "key": "fromId",
      "value": "0"
    },
    {
      "key": "source",
      "value": ""
    }
  ]
}